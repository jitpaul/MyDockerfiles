<!DOCTYPE html>
<html>
<head>
<title>
JitPaul
</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

{% load static %}
<link rel="stylesheet" type="text/css" href="{% static "about/styles.css" %}"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script>
$(document).ready(function(){
                  
				  $("#button1").click(function(){ $("#project1").toggle();});
				  
				  $("#button2").click(function(){ $("#project2").toggle();});
				  
				  $("#button3").click(function(){ $("#project3").toggle();});
				  
				  $("#button4").click(function(){ $("#project4").toggle();});
				  
				  $("#button5").click(function(){ $("#project5").toggle();});
				  
				  $('[data-toggle="tooltip"]').tooltip();  
				  
				  
				  $("a").on('click', function(event) {
                                      if (this.hash !== "") {
                                         event.preventDefault();
                                         var hash = this.hash;
                                         $('html, body').animate({
                                                          scrollTop: $(hash).offset().top
                                                         }, 800, function(){
                                                                  window.location.hash = hash;
                                                                 });}});
});			  
</script>
<style>

  
  #project1, #project2, #project3, #project4,#project5
  {
     display:none;
	 background-color: #f2f4f7;
	 border-radius: 20px;
	 font-size:18px;
	 font-family:"Times New Roman", Georgia, Serif;
  }
  
  p.text-justify
  {
    font-family:"Times New Roman", Georgia, Serif;
  }
  
  .text-justify2
  {
    
	font-size:20px;
	padding: 40px;
  }
  
  p.text-center
  {
    font-family:"Times New Roman", Georgia, Serif;
	margin: 40px;
  }
  #foot
  {
     text-align:center;
  }
   
</style>
</head>



<body>

<article>

<section>
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="#section0"></a>
    </div>
    <ul class="nav navbar-nav">
    <li class="active"><a href="#section0">Home</a></li>
    <li><a href="#section1">Projects</a></li>
	<li><a href="#section4">Resume</a></li>
	<li><a href="#section5">Contact Me</a></li>
    </ul>
  </div>
</nav>
</section>

<section id="section0">
<br/><br/>
<br/><br/>
<header>
</header>
<div class="container">
<div class="row">
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="+1 (469) 664-7975" href ="tel:14696647975" ><i class="material-icons" style="font-size:36px">call</i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="paul.jitin@gmail.com" href ="mailto:paul.jitin@gmail.com" ><i class="material-icons" style="font-size:36px">email</i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="Github" target="_blank" href ="https://github.com/jitpaul" ><i class="fa fa-github-square" style="font-size:36px"></i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="Linkedin" target="_blank" href ="https://www.linkedin.com/in/jithinpaul/" ><i class="fa fa-linkedin-square" style="font-size:36px"></i></a></div>
</div>
<p class="text-justify text-justify2">
<em>Hello There:), here's my brief intro!<br/><br/>

My name is Jithin Paul and I am a graduate Student in Computer Science at the University of Texas at Dallas. I completed my bachelors degree
in Computer Science from National institute of Technology- Calicut. In my final year at college, I was able to secure a job at Oracle Corporation 
where I spent my next four years. I worked as an Applications Engineer within the HCM and Payroll module of the PeopleSoft Enterprise-an
ERP software owned by Oracle.<br/><br/>

I moved to the United States in the Fall of 2016 to pursue my Masters degree and I will graduate in December 2017.:)
<br/><br/>
The bachelor's degree and current master’s degree in CS have really helped build a strong base in the Computer Science fundamentals. My stint at 
Oracle gave me a comprehensive exposure to the design and development cycles of a commercial software. I can confidently say that I am self-managed but a 
committed team player with good problem solving and communication skills.</em>
</p>
</div>

</section>

<section id="section1">
<br/><br/>
<header>
<h2 class="text-center text-primary">PROJECTS</h2>
</header>

<div class="container">
<p class="text-justify text-justify2">
<strong><a target="_blank" href ="http://localhost:8000/tictactoe/">Tic Tac Toe</a></strong><br/>                                                               	                                                   
●	TicTacToe game was written in Python and it uses the recursive minimax algorithm. Web application was created using the Django framework. 
<button type="button" id="button1" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project1" class="text-justify text-justify2">
TicTacToe game can be framed into a typical search problem involving trees. The levels in the tree can be thought of as the number of total moves
made by either players until that point and each node at a level represents a state of the tictactoe game-board. The levels are alternated
between the two players and from each state, a player can make a move and proceed to one of the subsequent states at the next level.<br/><br/>

The above explanation does not make any sense!?? Well, let me make it more clear by correlating the game with the tree.<br/>

Imagine playing tictactoe on a game-board with your friend. Either, you or your friend can make the first move (lets call it move0).
After that, both of you will alternatively make moves until one of you wins or the game ends in a draw. These moves (move0, move1,move2....) 
can be correlated to the the levels of the aforementioned tree. So, at level0 move0 is made, at level1 move1 is made and so on.<br/>

Here on, you are Player1 and your friend is Player2. At the beginning of the game, the tree is at level0 and the root node represents the 
initial state of the game. You, being Player1, make the first move (move0) and the game state changes to one of the subsequent states represented 
by the root's children. Now, tree is at level1. Player2 then makes the next move (move1),game state and tree level change again. By the time, last 
move is made on the game-board, tree would have reached one of its leaf nodes.

Each of the leaf nodes represent an end state of the game. It could be a win for Player1, a win for Player2 or a draw. The objective of each player
when they make a move at any level is to maximize their chances of reaching a leaf node that guarantees a win for them or a draw.<br/>

Now since you have a fair idea about how the game and a search tree are related, lets discuss an algorithm to traverse the tree.<br/><br/>

Recursive Minimax algorithm is used to dynamically evaluate a state in the game. As discussed before, the nodes in the search tree represent these 
states. A node is a "max" node if it describes a state where the "maximizer" (our Player1) is to make a move. It is a "min" node if it describes 
a state where the "minimizer" (our Player2) is to make a move. The children of a node are all the possible states that can be reached after one move.
With each state 'x' we associate the value 'Vx'. The function evaluate(x) gives a static evaluation of the state.<br/><br/>

<pre>
    def nextBestMove(self):
        ret = -10
        rowBest = -1
        columnBest = -1
        for row in range(0,3):
            for column in range(0,3):
                if self.board[row][column] == ' ':
                    self.board[row][column] = 'x'
                    temp = self.miniMax(self.board,0)
                    if temp > ret:
                        rowBest = row
                        columnBest = column
                        ret = temp
                    self.board[row][column] = ' '
        return [rowBest,columnBest]
</pre>

<pre>
    def miniMax(self,board,flag):
        temp = self.evaluate(board)
        if temp == 1:
            return 1
        elif temp == -1:
            return -1
        elif temp == 0:
            return 0
        else:
            if flag == 0:
                ret = 10
                for row in range(0, 3):
                    for column in range(0, 3):
                        if board[row][column] == ' ':
                            board[row][column] = 'O'
                            ret = min(ret, self.miniMax(board, 1))
                            board[row][column] = ' '
                return ret
            else:
                ret = -10
                for row in range(0, 3):
                    for column in range(0, 3):
                        if board[row][column] == ' ':
                            board[row][column] = 'x'
                            ret = max(ret, self.miniMax(board, 0))
                            board[row][column] = ' '
                return ret
</pre>
<pre>
    def evaluate(self,board):
        # check rows
        if (board[0][0] == 'x' and board[0][1] == 'x' and board[0][2] == 'x') or \
                (board[1][0] == 'x' and board[1][1] == 'x' and board[1][2] == 'x') or\
                (board[2][0] == 'x' and board[2][1] == 'x' and board[2][2] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[0][1] == 'O' and board[0][2] == 'O') or \
                (board[1][0] == 'O' and board[1][1] == 'O' and board[1][2] == 'O') or \
                (board[2][0] == 'O' and board[2][1] == 'O' and board[2][2] == 'O'):
            return -1

        # check columns
        if (board[0][0] == 'x' and board[1][0] == 'x' and board[2][0] == 'x') or \
                (board[0][1] == 'x' and board[1][1] == 'x' and board[2][1] == 'x') or \
                (board[0][2] == 'x' and board[1][2] == 'x' and board[2][2] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[1][0] == 'O' and board[2][0] == 'O') or \
                (board[0][1] == 'O' and board[1][1] == 'O' and board[2][1] == 'O') or \
                (board[0][2] == 'O' and board[1][2] == 'O' and board[2][2] == 'O'):
            return -1

        # check diagonals
        if (board[0][0] == 'x' and board[1][1] == 'x' and board[2][2] == 'x') or \
                (board[0][2] == 'x' and board[1][1] == 'x' and board[2][0] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O') or \
                (board[0][2] == 'O' and board[1][1] == 'O' and board[2][0] == 'O'):
            return -1

        # If board is full, return 0 else return -2
        for row in range(0,3):
            for column in range(0,3):
                if board[row][column] == ' ':
                    return -2
        return 0
</pre>

<pre>
    def makeMove(self,bestMove,flag):
        if flag==0:
            self.board[int(bestMove[0])][int(bestMove[1])] = 'O'
        else:
            self.board[int(bestMove[0])][int(bestMove[1])] = 'x'
        return self.evaluate(self.board)
</pre>
		
		
</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>In Memory File System</strong><br/>                                                               	                                                   
●	In-memory file system was written in Visual C++. It allows all the basic operations like creating, deleting and moving of files and 
directories, reading and writing of files etc. Users can also specify the memory size limit for the system in order to prevent the dynamic growth 
It also provides an option to write the data from the file system to disk at periodic intervals.
<button type="button" id="button2" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project2" class="text-justify text-justify2">
</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>Asynchronous Canvas Sharing</strong> <br/>               
●	This web based tool was built using SVG,jQuery and MYSQL. It allows multiple users to share a drawing board and make changes to it in real-time. It 
also includes a text chat with predictive texting.
<button type="button" id="button3" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project3" class="text-justify text-justify2">
The design for this application has been modeled on Client-
Server architecture. As is given in the Sequence diagram (Fig 2), session man-
agement is designed using a client-side interface and a server-side database.
The client can either start a session with the server or join an existing ses-
sion. The model designed to handle data transfer between the clients and
the server is specified in Fig 1. Here, in this system, in the event of any
change, the client sends an update to the server (using HTTP methods) and
the server notifies other clients that are alive in the same session.
We chose to render our drawings using vector graphics with the help of
geometrical primitives like point, line, circle etc. rather than using a raster
bitmap, so as to make data transfer efficient.<br/><br/>


<strong>Login Interface</strong><br/>
A user can either begin a session or join a session. When the user clicks either of the options, he/she
is asked for a session ID and a username.<br/>

<strong>Begin Session</strong><br/>
In order to begin a session, the user has to enter a unique
session ID. If the session ID already exists , an error is displayed. A
new table is created in the database with the session ID as the name.
The new user is added to the table 'users' along with the session ID.<br/>

<strong>Join session</strong> <br/>
In order to join a session, the user has to enter a unique
username along with the ID of an already existing session. If the
session ID doesnt exists , an error is displayed. If the username already
exists, an error is displayed. The joining users' names are added along
with their session IDs to the table 'users'.<br/><br/>


<strong>Drawing tools</strong><br/>
The drawing tools were created using JavaScript and jQuery.They
utilize properties of Scalar Vector Graphics (SVG).The drawing
tools modify the underlying code of SVG to create/edit drawings on
the board.When a tool is selected, its name is stored into a global
variable. When a person starts drawing with the tool, an element is
created with this name and its attributes are modified. The tools are
placed on the left hand side of the window. The tools implemented
are enlisted below.<br/>

1. Pencil-<br/>
It is a free-hand drawing tool which creates a continuous series of
points in any direction exactly same as the points traversed by the
mouse pointer. This tool is implemented using the <path> element.<br/>
2. Line-<br/>
When a user clicks the mouse at a point with this tool and drags the
pointer to another point, a straight line is created between the two
points. This tool is implemented using the <line> element.<br/>
3. Rectangle-<br/>
This tool creates a <rect> element which is axis aligned with the
current coordinate system. The dierence of X and Y coordinates
before and after a mouse drag is analysed and a rectangle is created
with the resultant values.<br/>
4. Circle-<br/>
A circle tool creates a circle based on a given center point and a ra-
dius communicated by a mouse drag. This tool is implemented using
<ellipse> element.<br/>
5. Ellipse-<br/>
Using this tool, a user tries to draw an ellipse using free hand which will
be converted automatically to an ellipse. The minimum and maximum
values of X and Y coordinates are analysed to nd the center of the
possible ellipse and is drawn using the <ellipse> element.<br/>
6. Whitener-<br/>
The whitener tool overwrites the points through which it is passed,
with white colour. It is implemented using <path> element.<br/>
7. Undo-<br/>
This tool performs the regular undo function. The <SVG> element is
traversed to nd its last child node (element). This node is removed
from the DOM tree and is pushed into a stack to perform 'redo' at a
later stage if required.<br/>
8. Redo-<br/>
This tool performs the regular redo function. The last node in the
stack is popped and is appended into the DOM tree.<br/>
9. Reset-<br/>
This tool removes all the child nodes of the DOM tree.<br/>
10. Download-<br/>
This tool converts the current SVG element into a Base64-encoded
data URI image which can be downloaded and saved.<br/>
11. Stroke-width selector<br/>
In the previous work, all shapes were created with a stroke width of
9
1 px, but now there is added options to select the stroke width. It is
achieved by manipulating the width attribute of the svg element.<br/>
12. Color-palette<br/>
Our previous implementation only supported drawing in a single colour
(black). We have now implemented a colour palette to facilitate draw-
ing in many colours. It is achieved by manipulating the color attribute
of the svg element. The palette contains 8 colors - black, red, blue,
green, grey, magenta, cyan, yellow.


 Drawing Board
Drawing board is initially a fully white SVG element. SVG includes
various predened events which pass the details of the specic event to
the assigned event-handling functions. Using XML parsing techniques
we create and modify the underlying code with the help of event han-
dlers. As shown in g 3, the drawing board is located to the right
hand side of the tools pallette. We used the following event handlers.
1. onLoad:
This event handler is triggered when the blank SVG le is loaded into
the HTML le. The initial SVG element is converted into a DOM
object and is stored in a variable.
2. onMouseDown:
This event handler is triggered when the user presses a mouse button.
On this event the element corresponding to the currently selected tool
is created and appended into the DOM tree.
3. onMouseMove:
This event handler is triggered when the user moves the mouse pointer.
On this event and if the mouse is pressed down the SVG content is
modied/updated in the DOM tree and transferred to the server.
4. onMouseUp:
This event is triggered when the user releases the mouse button. On
this event the nal values of the attributes are set.
The current X and Y coordinate are passed to the handler function
during onMouseDown, onMouseMove, onMouseUp events. These co-
ordinate values are used to set the attributes of the elements during
their creation and modication.
 Online users The SQL table 'users' contains the name of the users
along with their session IDs. The names of the users present in a
session are retrieved from this table via an AJAX request and are
displayed on this container dynamically. To avoid unnecessary network
congestion, we use COMET connection which returns the request only
when a change occurs on the number of users online.[5]
10
 Chat container
When a user starts a session, a SQL table with the session ID is created.
It stores the entries of the users of the session along with the times-
tamp, textid and texttype. The timestamp is a datastructure that
holds the date and time of the entry. Textid is an integer primary key
that auto increments upon each message entry.[9] The entries of the
table can either be a command or a chat data which are dierentiated
using 'textype'. '0' corresponds to logout command. '1' corresponds
to chat data and '2' corresponds to login command. The entries are
retrieved from this table via an AJAX request and are displayed on
this container dynamically. To avoid unnecessary network congestion,
we use COMET connection which returns the request only when the
table is updated.
4.3 Data Transfer
Data transfer functionality is logically divided into two units one to update
the server and the other to update the client. We created the asynchronous
data transfer required to simulate realtime interactivity using a technique
known as COMET.[5]
 Client updating the server
The handler function assigned to the onMouseMove and onMouseUp
events sends an AJAX POST request to the server whenever a change
occurs in the drawing board (client).[2] The requests contain, as pay-
load, commands to modify the svg code to re
ect only the changes
produced on the canvas and not the whole svg code itself. These com-
mands are create, modify, undo, redo and reset. On receiving this, the
server updates the data store. The handler for onMouseMove event
sends requests at an interval of 300ms to facilitate synchronization of
clients` drawing boards even before an element is completely drawn.
 Client updating itself
Once a client updates the server data store as explained above, the
other clients need to update itself. In our implementation, the client
gives a AJAX POST request to the server sending the last modied
time of the datastore(initially 0) time as payload.[2] After the rst
POST request, each client gets the last modied time from the server.
This value is circulated back to the server to make a decision when to
send the modied content. On successful receipt of response, the re-
ceived data is added to the DOM tree and this AJAX request method
is recursed. So we make sure that the request is continuously sent.
11
On server side, the last modied time of the SVG lestore is compared
with the value in the payload (which is the time upto which client has
been updated) received from the client. Since the value of time in
the request, if there has been no modication to the data store, the
request is put in a loop and made to wait. When the data store is
modied by some other client, the control breaks out of the loop and
the current change in code in the data store is sent to the client. This
is our implementation of the web application model of COMET.[5]
4.4 Concurrency
We have solved the issue of concurrency while drawing by transfering
to the server only the SVG elements which are modied or newly cre-
ated. Whenever the SVG code in the client's drawing board changes,
the corresponding modied elements are sent to the server along with
a command to notify server whether to append or to replace an el-
ement. When two dierent users make modications to the drawing
board, they are in eect modifying dierent elements of the svg code.
The server modies them as dierent independent transactions. The
inbuilt requeset handling system of the mySQL database server queues
the incoming request and processes them one by one only. The client's
browser updates the SVG code displayed to the user by inserting the
received content in the backend. <br/><br/>


4.5 Sessions
Sessions and support for multiple drawing rooms have now been imple-
mented in our work. Sessions have been created using a predetermined
id (session ID) decided by the creating user and managed using a database.
14
The server now accesses the session ID and user ID from session variables
when data is received via the AJAX requests for storing the modifcations.
On creating a session, two new database tables, one to store the svg data
and the other to store chat lines for that particular session, are created.
When all users of a session log out, the table associated with that particular
session is deleted.
4.6 Data Storage
The database is used to store the session information and list the users
currently active in the session. The username and the session ID is stored
in the table 'users'. The SVG content from dierent sessions is stored in
dierent tables with each table given the concatenation of session ID and an
underscore and the string 'le' as name containing the name of the creator
of the element, its shape, number, id and 
ag. Each session of the chat
has an associated database table with session ID as its name, containing
the author, chatline,its timestamp, textid and texttype. The database also
records when a new member has joined the session and the application
subsequently noties all users in the session. Similarly, when a person logs
out, every user in that session is notied. <br/><br/>


The team has developed a quite ecient application based on the orignial de-
sign of the project. Although there is room for improvement, the model has
potential to lead to a standard for inter-operability between shared graphics
editors that would allow users to develop and collaborate dierent applica-
tions, and will be able to draw together.
On load testing done using Apache bench on a test server (1.5 GHz and
4 GB RAM), the application was found to handle a maximum of around 256
concurrent connections in accordance with the default maximum value set
in apache. This are obtained under test parameters of 1000 requests with a
concurrency level of 256.
The approach followed in this project diers signicantly from the origi-
nal model of the world wide web, in which a web browser requests a resource
completely at a time. Here we circumvent the limitations of the page-by-
page web model and traditional polling by oering real-time interaction,
using a persistent or long-lasting connection and multiple sessions.<br/>

</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong><a target="_blank" href ="http://www.1000smiles.in/">www.1000smiles.in</a></strong><br/>                                               
●	I built this website a long time ago. 1000smiles is an NGO based in India that focuses on the welfare of the unprivileged children.  
<button type="button" id="button4" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project4" class="text-justify text-justify2">
 
1000smiles comprises of a group of energetic young individuals with a strong determination to work for the benefit of fellow beings. 
Currently, 1000smiles operates in Bangalore and Pune. <br/><br/>

In their own words,
<blockquote>
We organize one day programs at orphanages and children's homes across Bangalore (comprising of some classes ,activity workshops and fun games), 
help orphanages get in contact with potential sponsors and pitch ourselves in to provide support when the situation demands . 
Currently, we support nearly 12 orphanages in Bangalore and Pune. <br/>
We also provide regular tuition classes free of cost to high school children in a few orphanages in Bangalore.<br/> 
</blockquote>

I was an active member of 1000smiles before I moved to the United States. In its formative years, we needed a website and I volunteered 
to design it although I didn't really  have the technical know-how. After some major googling, I decided to use the Drupal CMS. This website is 
the end result of a couple of hours of drupal tutorial videos and a nightout.<br/>

The website used to be really slow in the beginning. So I made use of the google's <a href = "https://developers.google.com/speed/pagespeed/">PageSpeed 
insights </a> to analyze the issues and made several changes to the website as suggested by google. I even used some basic SEO techniques to 
improve the site's visibility.<br/><br/>

Update:- When I ran the pagespeed insights against 1000smiles.in recently, it was rated poorly:(. I guess its time for me to revamp the website once 
again.

</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>Agile RUP vs Scrum vs XP</strong> <br/>               
●	A brief comprarative study between the three popular software development methodologies in practice today.
<button type="button" id="button5" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project5" class="text-justify text-justify2">
The purpose of the article is to identify the key differences between the three agile
development methodologies namely, Scrum, XP and Agile RUP and choose the one best suited for
the design and implementation of the project in question.
Scrum is a lightweight agile development methodology. It consists of sprints that are typically 4-5
weeks in duration. In each sprint, the development team works closely with the product owner to
identify and prioritize system functionalities in the form of a product back log. A typical back log
would include the features, bug fixes and non functional requirements that can be delivered at the
end of a sprint.<br/>
Extreme Programming promotes high customer involvement, rapid feedback loops, continuous
testing, continuous planning, and close teamwork to deliver working software at very frequent
intervals, typically every 1-3 weeks. The customer works closely with the development team and
identify and prioritize requirements in the form of user stories. The development team estimates,
plans, and delivers the highest priority user stories in the form of working, tested software on an
iteration-by-iteration basis.<br/>
Key differences between the three methodologies:
<table class="table table-striped table-bordered table-hover table-condensed">
<tr>
<th>Agile RUP</th><th>XP</th><th>Scrum</th>
</tr>
<tr>
<td>Agile + RUP</td><td>Agile</td><td>Scrum</td>
</tr>
<tr>
<td>Heavy Methodology as it consists of a
set of four major phases and seven
disciplines.</td><td>Lightweight Methodology</td><td>Lightweight Methodology</td>
</tr>
<tr>
<td>Large number of Artifacts</td><td>Comparatively fewer artifacts</td><td>Comparatively fewer artifacts</td>
</tr>
<tr>
<td>Equal focus on both Engineering and
Productivity.</td><td>More focus on Engineering</td><td>More focus on Productivity</td>
</tr>
<tr>
<td>Up-front loaded in terms of modeling
required before the start of
implementation.</td><td>Not so much</td><td>Not so much</td>
</tr>
</table>
In conclusion, Agile AUP combines the best of both Agile and RUP methodologies. Ours being a
large, long- term, enterprise-level project with high complexity, I would suggest sticking to Agile RUP
as it consists of better artifacts that document every step and yet is simple enough to provide
flexibility and leeway to our developers and stake holders. This would help us strike a balance
between the face to face communications and the traditional document based communication which
would largely benefit us in the long run.
</div>
</div>
<br/>


<br/>
</section>



<section id="section4">
<br/>
<br/>
<header>
<h2 class="text-center text-primary">RESUME</h2>
</header>
<div class="container text-center text-primary">
<br/><br/>
<object id ="pdf" data="{% static "about/JithinPaul.pdf" %}">
</object>
<br/><br/>
<br/><br/>
<br/><br/>
<br/><br/>
</div>
</section>



<section id="section5">
<br/><br/>

<header>
<h2 class="text-center text-primary">CONTACT ME</h2>
</header>
<div class="container">	
		<form>
         <table id="table2">
		  <tr>
		       <td>Your Name:<br/>
		       <input type="text" name="name" size="30"/>
			   </td>
			   <td id="td" rowspan="3">Message:<br />
               <textarea rows="8" cols="50" name="description">
               </textarea>
			   </td>
		  </tr>	   		   
		  <tr>
		       <td>Your E-Mail Address:<br/>
		       <input type="email" name="eMail" size="30"/>
			   </td>
			   <td>
			   </td>
		  </tr>
		  <tr>
		       <td>Subject:<br/>
		       <input type="text" name="Subject" size="30"/>
			   </td>
			   <td>
			   </td>
		  </tr>        
	
          <tr>
		       <td>
			   </td>
			   <td>
			   <input class="btn btn-info" type="submit" name="submit" value="Submit" /> <input class="btn btn-info" type="reset" name="reset" value="reset" />
			   </td>
		   </tr>
         </table>		
		</form>
		</div>
		<br/>
		<br/>
      </section>
	  

</article>

 <footer>
<br/><br/>
<br/><br/>
	<p id="foot"><strong>Posted by: Jithin Paul</strong></p>
 </footer>
	
</body>
</html>
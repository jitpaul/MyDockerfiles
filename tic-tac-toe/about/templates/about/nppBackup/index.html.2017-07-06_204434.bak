<!DOCTYPE html>
<html>
<head>
<title>
JitPaul
</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

{% load static %}
<link rel="stylesheet" type="text/css" href="{% static "about/styles.css" %}"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script>
$(document).ready(function(){
                  
				  $("#button1").click(function(){ $("#project1").toggle();});
				  
				  $("#button2").click(function(){ $("#project2").toggle();});
				  
				  $("#button3").click(function(){ $("#project3").toggle();});
				  
				  $("#button4").click(function(){ $("#project4").toggle();});
				  
				  $("#button5").click(function(){ $("#project5").toggle();});
				  
				  $('[data-toggle="tooltip"]').tooltip();  
				  
				  
				  $("a").on('click', function(event) {
                                      if (this.hash !== "") {
                                         event.preventDefault();
                                         var hash = this.hash;
                                         $('html, body').animate({
                                                          scrollTop: $(hash).offset().top
                                                         }, 800, function(){
                                                                  window.location.hash = hash;
                                                                 });}});
});			  
</script>
<style>

  
  #project1, #project2, #project3, #project4,#project5
  {
     display:none;
	 background-color: #f2f4f7;
	 border-radius: 20px;
	 font-size:18px;
	 font-family:"Times New Roman", Georgia, Serif;
  }
  
  p.text-justify
  {
    font-family:"Times New Roman", Georgia, Serif;
  }
  
  .text-justify2
  {
    
	font-size:20px;
	padding: 40px;
  }
  
  p.text-center
  {
    font-family:"Times New Roman", Georgia, Serif;
	margin: 40px;
  }
  #foot
  {
     text-align:center;
  }
   
</style>
</head>



<body>

<article>

<section>
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="#section0"></a>
    </div>
    <ul class="nav navbar-nav">
    <li class="active"><a href="#section0">Home</a></li>
    <li><a href="#section1">Projects</a></li>
    <li><a href="#section2">Experience</a></li>
	<li><a href="#section3">Education</a></li>
	<li><a href="#section4">Resume</a></li>
	<li><a href="#section5">Contact Me</a></li>
    </ul>
  </div>
</nav>
</section>

<section id="section0">
<br/><br/>
<br/><br/>
<header>
</header>
<div class="container">
<div class="row">
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="+1 (469) 664-7975" href ="tel:14696647975" ><i class="material-icons" style="font-size:36px">call</i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="paul.jitin@gmail.com" href ="mailto:paul.jitin@gmail.com" ><i class="material-icons" style="font-size:36px">email</i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="Github" target="_blank" href ="https://github.com/jitpaul" ><i class="fa fa-github-square" style="font-size:36px"></i></a></div>
    <div class="col-sm-3 text-justify text-justify2">&nbsp&nbsp&nbsp<a data-toggle="tooltip" title="Linkedin" target="_blank" href ="https://www.linkedin.com/in/jithinpaul/" ><i class="fa fa-linkedin-square" style="font-size:36px"></i></a></div>
</div>
<p class="text-justify text-justify2">
<em>Hello There:), here's my brief intro!<br/><br/>

My name is Jithin Paul and I am a graduate Student in Computer Science at the University of Texas at Dallas. I completed my bachelors degree
in Computer Science from National institute of Technology- Calicut. In my final year at college, I was able to secure a job at Oracle Corporation 
where I spent my next four years. I worked as an Applications Engineer within the HCM and Payroll module of the PeopleSoft Enterprise-an
ERP software owned by Oracle.<br/><br/>

I moved to the United States in the Fall of 2016 to pursue my Masters degree and I will graduate in December 2017.:)
<br/><br/>
The bachelor's degree and current master’s degree in CS have really helped build a strong base in the Computer Science fundamentals. My stint at 
Oracle gave me a comprehensive exposure to the design and development cycles of a commercial software. I can confidently say that I am self-managed but a 
committed team player with good problem solving and communication skills.</em>
</p>
</div>

</section>

<section id="section1">
<br/><br/>
<header>
<h2 class="text-center text-primary">PROJECTS</h2>
</header>

<div class="container">
<p class="text-justify text-justify2">
<strong><a target="_blank" href ="http://localhost:8000/tictactoe/">Tic Tac Toe</a></strong><br/>                                                               	                                                   
●	Tic Tac Toe game was written in Python and it uses the recursive minimax algorithm. Web application was created using the Django framework. 
<button type="button" id="button1" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project1" class="text-justify text-justify2">
Tic Tac Toe game can be framed into a typical search problem involving trees. The levels in the tree can be thought of as the number of total moves
made by either players until that point and each node at a level represents a state of the tictactoe game-board. The levels are alternated
between the two players and from each state, a player can make a move and proceed to one of the subsequent states at the next level.<br/><br/>

Let me make it more clear.<br/>

Imagine playing the tictactoe game on a game-board with your friend. Either, you or your firend can make the first move.
But if you make the first move (lets call it move0), your friend will definitely make the next move(move1). Hence, you and your friend are going
to alternatively make these moves until one of you wins or the game ends in a draw. These moves (move0, move1,move2....) can be correlated to the
the levels of the tree. So at level0 move0 is made, at level1 move1 is made and so on.<br/>

The beginning of the game is level 0 with the root node representing the initial state of the game. You, being player1, makes the first move (move0) and
the game state changes to one of the many different states represented by the root's children. Now player2 makes the next move (move1),game state
changes again.This continues until the we reach the leaf nodes of tree.

Each of the leaf nodes represent an end state of the game. It could be a win for player1, a win for player2 or a draw. The objective of each player
when they make a move at any level is to maximize their chances of reaching a leaf node that represent a win for them or a draw.<br/>

Now,since you have a fair idea about how the game and a search tree are correlated, lets proceed to discuss about an algorithm to traverse the tree.<br/>

Recursive Minimax algorithm is used to dynamically evaluate a state in the game. As discusse before, the nodes in the search tree represent these 
states. A node is a "max" node if it describes a state where the "maximizer" is to make a move. It is a "min" node if it describes 
a state where the "minimizer" is to make a move. The children of a node are all the possible stats that can be reached after one move.
With each state 'x' we associate the value 'Vx'. The function static(x) gives a static evaluation of the position.<br/><br/>

<pre>
    def nextBestMove(self):
        ret = -10
        rowBest = -1
        columnBest = -1
        for row in range(0,3):
            for column in range(0,3):
                if self.board[row][column] == ' ':
                    self.board[row][column] = 'x'
                    temp = self.miniMax(self.board,0)
                    if temp > ret:
                        rowBest = row
                        columnBest = column
                        ret = temp
                    self.board[row][column] = ' '
        return [rowBest,columnBest]
</pre>

<pre>
    def miniMax(self,board,flag):
        temp = self.evaluate(board)
        if temp == 1:
            return 1
        elif temp == -1:
            return -1
        elif temp == 0:
            return 0
        else:
            if flag == 0:
                ret = 10
                for row in range(0, 3):
                    for column in range(0, 3):
                        if board[row][column] == ' ':
                            board[row][column] = 'O'
                            ret = min(ret, self.miniMax(board, 1))
                            board[row][column] = ' '
                return ret
            else:
                ret = -10
                for row in range(0, 3):
                    for column in range(0, 3):
                        if board[row][column] == ' ':
                            board[row][column] = 'x'
                            ret = max(ret, self.miniMax(board, 0))
                            board[row][column] = ' '
                return ret
</pre>
<pre>


    def evaluate(self,board):
        # check rows
        if (board[0][0] == 'x' and board[0][1] == 'x' and board[0][2] == 'x') or \
                (board[1][0] == 'x' and board[1][1] == 'x' and board[1][2] == 'x') or\
                (board[2][0] == 'x' and board[2][1] == 'x' and board[2][2] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[0][1] == 'O' and board[0][2] == 'O') or \
                (board[1][0] == 'O' and board[1][1] == 'O' and board[1][2] == 'O') or \
                (board[2][0] == 'O' and board[2][1] == 'O' and board[2][2] == 'O'):
            return -1

        # check columns
        if (board[0][0] == 'x' and board[1][0] == 'x' and board[2][0] == 'x') or \
                (board[0][1] == 'x' and board[1][1] == 'x' and board[2][1] == 'x') or \
                (board[0][2] == 'x' and board[1][2] == 'x' and board[2][2] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[1][0] == 'O' and board[2][0] == 'O') or \
                (board[0][1] == 'O' and board[1][1] == 'O' and board[2][1] == 'O') or \
                (board[0][2] == 'O' and board[1][2] == 'O' and board[2][2] == 'O'):
            return -1

        # check diagonals
        if (board[0][0] == 'x' and board[1][1] == 'x' and board[2][2] == 'x') or \
                (board[0][2] == 'x' and board[1][1] == 'x' and board[2][0] == 'x'):
            return 1
        if (board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O') or \
                (board[0][2] == 'O' and board[1][1] == 'O' and board[2][0] == 'O'):
            return -1

        # If board is full, return 0 else return -2
        for row in range(0,3):
            for column in range(0,3):
                if board[row][column] == ' ':
                    return -2
        return 0
</pre>

<pre>
    def makeMove(self,bestMove,flag):
        if flag==0:
            self.board[int(bestMove[0])][int(bestMove[1])] = 'O'
        else:
            self.board[int(bestMove[0])][int(bestMove[1])] = 'x'
        return self.evaluate(self.board)
</pre>

<pre>
    def printBoard(self):
        #ret = "<table>"
        #for row in range(0, 3):
        #    ret += "<tr>"
        #    for column in range(0, 3):
        #        ret += "<td>" + self.board[row][column] + "</td>"
        #    ret += "</tr>"
        #ret += "</table>"
        return self.board
</pre>		
		
</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>In Memory File System</strong><br/>                                                               	                                                   
●	In-memory file system was written in Visual C++. It allows all the basic operations like creating, deleting and moving of files and 
directories, reading and writing of files etc. Users can also specify the memory size limit for the system in order to prevent the dynamic growth 
It also provides an option to write the data from the file system to disk at periodic intervals.
<button type="button" id="button2" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project2" class="text-justify text-justify2">
</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>Asynchronous Canvas Sharing</strong> <br/>               
●	This web based tool was built using SVG,jQuery and MYSQL. It allows multiple users to share a drawing board and make changes to it in real-time. It 
also includes a text chat with predictive texting.
<button type="button" id="button3" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project3" class="text-justify text-justify2">
</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong><a target="_blank" href ="http://www.1000smiles.in/">www.1000smiles.in</a></strong><br/>                                               
●	I volunteered to design the website for 1000smiles - an NGO based in India that focuses primarily on the welfare of underprivileged children.
It was built using Drupal CMS and I used some basic SEO techniques to improve the site's visibility. 
<button type="button" id="button4" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project4" class="text-justify text-justify2">
1000smiles is an NGO based in Bangalore that focuses on the welfare of the unprivileged children. 
It comprises of a group of energetic young individuals with a strong determination to work for the benefit of fellow beings. 
Currently, 1000smiles operates in Bangalore and Pune. <br/>

We organize one day programs at orphanages and children's homes across Bangalore (comprising of some classes ,activity workshops and fun games), 
help orphanages get in contact with potential sponsors and pitch ourselves in to provide support when the situation demands . 
Currently, we support nearly 12 orphanages in Bangalore and Pune. <br/>

We also provide regular tuition classes free of cost to high school children in a few orphanages in Bangalore.<br/> 

</div>
</div>
<br/>


<div class="container">
<p class="text-justify text-justify2">
<strong>Agile RUP vs Scrum vs XP</strong> <br/>               
●	A brief comprarative study between the three popular software development methodologies in practice today.
<button type="button" id="button5" class="btn-info btn btn-primary btn-sm">Read More</button>
</p>
<div id="project5" class="text-justify text-justify2">
The purpose of the article is to identify the key differences between the three agile
development methodologies namely, Scrum, XP and Agile RUP and choose the one best suited for
the design and implementation of the project in question.
Scrum is a lightweight agile development methodology. It consists of sprints that are typically 4-5
weeks in duration. In each sprint, the development team works closely with the product owner to
identify and prioritize system functionalities in the form of a product back log. A typical back log
would include the features, bug fixes and non functional requirements that can be delivered at the
end of a sprint.<br/>
Extreme Programming promotes high customer involvement, rapid feedback loops, continuous
testing, continuous planning, and close teamwork to deliver working software at very frequent
intervals, typically every 1-3 weeks. The customer works closely with the development team and
identify and prioritize requirements in the form of user stories. The development team estimates,
plans, and delivers the highest priority user stories in the form of working, tested software on an
iteration-by-iteration basis.<br/>
Key differences between the three methodologies:
<table class="table table-striped table-bordered table-hover table-condensed">
<tr>
<th>Agile RUP</th><th>XP</th><th>Scrum</th>
</tr>
<tr>
<td>Agile + RUP</td><td>Agile</td><td>Scrum</td>
</tr>
<tr>
<td>Heavy Methodology as it consists of a
set of four major phases and seven
disciplines.</td><td>Lightweight Methodology</td><td>Lightweight Methodology</td>
</tr>
<tr>
<td>Large number of Artifacts</td><td>Comparatively fewer artifacts</td><td>Comparatively fewer artifacts</td>
</tr>
<tr>
<td>Equal focus on both Engineering and
Productivity.</td><td>More focus on Engineering</td><td>More focus on Productivity</td>
</tr>
<tr>
<td>Up-front loaded in terms of modeling
required before the start of
implementation.</td><td>Not so much</td><td>Not so much</td>
</tr>
</table>
In conclusion, Agile AUP combines the best of both Agile and RUP methodologies. Ours being a
large, long- term, enterprise-level project with high complexity, I would suggest sticking to Agile RUP
as it consists of better artifacts that document every step and yet is simple enough to provide
flexibility and leeway to our developers and stake holders. This would help us strike a balance
between the face to face communications and the traditional document based communication which
would largely benefit us in the long run.
</div>
</div>
<br/>


<br/>
</section>


<section id="section2">
<br/><br/>
<header>
<h2 class="text-center text-primary">EXPERIENCE</h2>
</header>
<div class="container">
<p class="text-justify text-justify2">
<strong>Oracle Corporation, Senior Applications Engineer, (July 2015- July 2016)</strong><br/>
Single handedly designed and implemented a new Japanese HR software ­called ‘My Number’ based on an agile based iterative development process, using  application level encryption using symmetric technique, Object Oriented Programming, role based security and workflow self service.
Customer base for the HR Japan product increased threefold in the fiscal following the release of the above application. Received an Oracle Excellence Award for the project.
Proposed an award winning gamification enabled internal review system where employees could rate the system pages/functionalites within our product, propose changes to them, participate in quizzes etc  to win various rewards.   
Mentored and trained new resources in the team, thus preparing them for their respective job roles.
Delivered product bug fixes and implemented additional functionalities to customers based on their requirements with less than 1% defects.
</p>
<p class="text-justify text-justify2">
<strong>Oracle Corporation, Applications Engineer, (July 2012- July 2015)</strong><br/>
Key member of the cross-functional team that consolidated the Entity Relationship Diagrams (ERD) model which detailed the table loading sequence for all the components within HCM module which helped optimize system performance by more than 20%.
Brought down the defect backlog of a customer by 80% in a span of 1 month whereas  the normal average was 15-20% for a team.
One of the very few in the team of 20 members to have worked on all the modules handled by the team.
Awarded above average rating of 3+ (Exceeding Expectations) at Oracle India for the year 2013 – in just one year after starting my professional career.
</p>
<br/><br/>
<br/><br/>
</div>
</section>


<section id="section3">
<br/><br/>
<header>
<h2 class="text-center text-primary">EDUCATION</h2>
</header>
<div class="container">
<p class="text-justify text-justify2">
<strong>Master of Science (M.S) in Computer Science, University of Texas at Dallas (August 2016- Ongoing)</strong><br/>
Statistics for Data Science, Database Design, Machine Learning, 
Design and Analysis of Algorithms, Big Data, Artificial Intelligence, Software Testing Verification and Validation, 
Object Oriented Design
</p>
<p class="text-justify text-justify2">
<strong>Bachelor of Technology (B-Tech) in Computer Science,National Institute of Technology- Calicut (July 2008- April 2012)</strong><br/>
Data Structures and Algorithms, Database Management Systems, 
Advanced Data Structures, Principles of Programming Languages, Software Design, Web Programming.
</p>
<br/><br/>
<br/><br/>
</div>
</section>




<section id="section4">
<br/>
<br/>
<header>
<h2 class="text-center text-primary">RESUME</h2>
</header>
<div class="container text-center text-primary">
<br/><br/>
<object id ="pdf" data="{% static "about/JithinPaul.pdf" %}">
</object>
<br/><br/>
<br/><br/>
<br/><br/>
<br/><br/>
</div>
</section>



<section id="section5">
<br/><br/>

<header>
<h2 class="text-center text-primary">CONTACT ME</h2>
</header>
<div class="container">	
		<form>
         <table id="table2">
		  <tr>
		       <td>Your Name:<br/>
		       <input type="text" name="name" size="30"/>
			   </td>
			   <td id="td" rowspan="3">Message:<br />
               <textarea rows="8" cols="50" name="description">
               </textarea>
			   </td>
		  </tr>	   		   
		  <tr>
		       <td>Your E-Mail Address:<br/>
		       <input type="email" name="eMail" size="30"/>
			   </td>
			   <td>
			   </td>
		  </tr>
		  <tr>
		       <td>Subject:<br/>
		       <input type="text" name="Subject" size="30"/>
			   </td>
			   <td>
			   </td>
		  </tr>        
	
          <tr>
		       <td>
			   </td>
			   <td>
			   <input class="btn btn-info" type="submit" name="submit" value="Submit" /> <input class="btn btn-info" type="reset" name="reset" value="reset" />
			   </td>
		   </tr>
         </table>		
		</form>
		</div>
		<br/>
		<br/>
      </section>
	  

</article>

 <footer>
<br/><br/>
<br/><br/>
	<p id="foot"><strong>Posted by: Jithin Paul</strong></p>
 </footer>
	
</body>
</html>